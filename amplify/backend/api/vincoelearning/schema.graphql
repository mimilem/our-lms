type Institution @model {
  id: ID!
  institutionName: String!
  academicYear: String
  adress: String
  email: String
  phone: String
  campuses: [Campus] @connection(keyName: "byInstitution", fields: ["id"])
}

type Notifications
  @model
  @key(
    name: "byInstitution"
    fields: ["title", "description", "create_date", "create_time"]
  ) {
  id: ID!
  title: String!
  description: String
  create_date: String!
  create_time: String!
  seen: Boolean
  institutionID: ID!
  institution: Institution @connection(fields: ["institutionID"])
}

type Events
  @model
  @key(
    name: "byInstitution"
    fields: [
      "title"
      "description"
      "event_date"
      "event_place"
      "create_date"
      "create_time"
    ]
  ) {
  id: ID!
  title: String!
  description: String
  event_date: String!
  event_place: String
  create_date: String!
  create_time: String!
  institutionID: ID!
  institution: Institution @connection(fields: ["institutionID"])
}

type Campus
  @model
  @auth(rules: [{ allow: groups, groups: ["Admin"] }])
  @key(
    name: "byInstitution"
    fields: [
      "institutionID"
      "campusName"
      "campusHead"
      "campusCity"
      "campusPhoneNumber"
      "campusEmailAddress"
      "campusAdress"
    ]
  ) {
  id: ID!
  campusName: String!
  campusHead: String
  campusCity: String
  campusPhoneNumber: String
  campusEmailAddress: String
  campusAdress: String
  institutionID: ID!
  institution: Institution @connection(fields: ["institutionID"])
  faculties: [Faculty] @connection(keyName: "byCampus", fields: ["id"])
}

type Faculty
  @model
  @key(name: "byCampus", fields: ["campusID", "facultyName"]) {
  id: ID!
  facultyName: String!
  headofFaculty: String!
  facultyPhoneNumber: String!
  facultyEmailAddress: String!
  facultyAdress: String!
  campusID: ID!
  campus: Campus @connection(fields: ["campusID"])
  departments: [Department] @connection(keyName: "byFaculty", fields: ["id"])
}

type Department
  @model
  @key(name: "byFaculty", fields: ["facultyID", "departmentName"]) {
  id: ID!
  departmentName: String!
  headofDepartment: String
  facultyID: ID!
  faculty: Faculty @connection(fields: ["facultyID"])
  classes: [Class] @connection(keyName: "byDepartment", fields: ["id"])
}

type Class
  @model
  @key(
    name: "byDepartment"
    fields: [
      "departmentID"
      "qualificationName"
      "qualificationLevel"
      "qualificationYear"
    ]
  ) {
  id: ID!
  qualificationName: String!
  qualificationLevel: String
  qualificationYear: String
  departmentID: ID!
  department: Department @connection(fields: ["departmentID"])
  modules: [ClassModule] @connection(keyName: "byClass", fields: ["id"])
  students: [Student] @connection(keyName: "byClass", fields: ["id"])
}

type ClassModule
  @model
  @key(
    name: "byClass"
    fields: [
      "classID"
      "moduleName"
      "courseCode"
      "teacherName"
      "coursePeriod"
      "courseCredit"
      "courseDescription"
    ]
  ) {
  id: ID!
  moduleName: String!
  courseCode: String
  teacherName: String
  coursePeriod: [String]
  courseCredit: String
  courseIsCompulsory: Boolean
  courseDescription: String
  classID: ID!
  class: Class @connection(fields: ["classID"])
  moduleChapters: [ModuleChapter]
    @connection(keyName: "byClassModule", fields: ["id"])
}

type ModuleChapter
  @model
  @key(name: "byClassModule", fields: ["classModuleID", "chapterName"]) {
  id: ID!
  chapterName: String!
  classModuleID: ID
  classModule: ClassModule @connection(fields: ["classModuleID"])
  files: [File] @connection(keyName: "byModuleChapter", fields: ["id"])
  lessons: [Lesson] @connection(keyName: "byModuleChapter", fields: ["id"])
}

type Lesson
  @model
  @key(name: "byModuleChapter", fields: ["moduleChapterID", "lessonName"]) {
  id: ID!
  lessonName: String!
  moduleChapterID: ID!
  moduleChapter: ModuleChapter @connection(fields: ["moduleChapterID"])
  lessonTimeTable: [LessonTimeTable]
    @connection(keyName: "byLesson", fields: ["id"])
}

type LessonTimeTable
  @model
  @key(
    name: "byLesson"
    fields: ["lessonID", "lessonName", "day", "startTime", "endTime"]
  ) {
  id: ID!
  lessonName: String!
  day: [String]
  startTime: [String]
  endTime: [String]
  lessonID: ID!
  lesson: Lesson @connection(fields: ["lessonID"])
}

type File
  @model
  @auth(rules: [{ allow: owner }])
  @key(name: "byModuleChapter", fields: ["moduleChapterID", "name", "owner"]) {
  id: ID!
  name: String
  owner: String
  file: S3Object
  moduleChapterID: ID
  moduleChapter: ModuleChapter @connection(fields: ["moduleChapterID"])
}

type S3Object {
  id: ID
  bucket: String!
  region: String!
  key: String!
}

type Student
  @model
  @key(
    name: "byClass"
    fields: [
      "classID"
      "studentFullname"
      "studentSurname"
      "studentPhoneNumber"
      "studentEmail"
      "studentCampusName"
      "studentDepartmentName"
      "studentQualificationName"
    ]
  ) {
  id: ID!
  studentFullname: String!
  studentSurname: String!
  studentPhoneNumber: String
  studentEmail: String
  studentNumber: String!
  pending: Boolean!

  studentCampusName: String!
  studentCampusID: String!

  studentFacultyName: String!
  studentFacultyID: String!

  studentDepartmentName: String!
  studentDepartmentID: String!

  studentQualificationName: String!
  studentQualificationID: String!

  classID: ID!
  class: Class @connection(fields: ["classID"])
}

type SuperAdmin
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] }
      { allow: owner, ownerField: "username" }
    ]
  ) {
  id: ID!
  username: String!
  email: String!
  name: String!
  family_name: String!
  phone_number: String!
}

type Teacher
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] }
      { allow: owner, ownerField: "username" }
    ]
  ) {
  id: ID!
  username: String!
  email: String!
  teacherFullName: String!
  teacherSurname: String!
  teacherGender: String!
  teacherCampusName: String!
  teacherDepartmentName: String!
  teacherQualificationName: [String!]
  teacherCourseName: [String!]
  role: String
}

type Message @model {
  id: ID!
  author: String!
  body: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}
